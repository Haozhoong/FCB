# Data
data_type: brain                  # data type: brain knee
mask_type: cartesiancs            # mask: poisson, cartesian, cartesianrandom, cartesiancs, radial
sampling_factor: 8                # UnderSampling factor
n_coils: 8                        # Coils Number
add_noise: False                  # Add extra Guassian Noise or not
noise_level: 0.2                  # Noisel level
img_size: 320                     # size of training images
label_index_train:                # Samples for training
    - 0
    - 5017     
label_index_val:                  # Samples for validation
    - 0
    - 524

---
# Model
model_name: FUNet             # model: UNet, FUNet, MoDL, FMoDL, SwinMR
n_channels: 64                # Number of hidden channels of UNet
fcb_l: 2                      # Number of layer which FCB begins to be used
fcb_forward: True             # True: using FCB layers from the front; False: Symmetrically
shorcut: True                 # short cut connection in conv block

---
# Training parameters
optimizer: RMSprop           # optimizer: RMSprop, Adma
LR: 1e-4
weight_decay: 1e-7           
momentum: 0.9                
loss: L1                     # loss function: L1, MSE
epoches: 80                  # total training epoches
batch_size: 16               # barch size
repara: True
dwconv: True                  # for repara
circ_pad: True                # for repara
repara_path: '/data/smart/shz/project/FCB/export/UNet__n_channels_64__dwconv_True__shorcut_True__circ_pad_True/brain_cartesiancs_8__RMSprop__LR_0.0001__wd_0.0__momentum_0.9__loss_L1'   # path to load the pretrained model

---
# Save and load
save_dir: './export'
save_sub_dir: ''
save_label: ''
resume_training: No

# other
device: cuda
vis_interval: 50             # print loss for every ? step